
package examination_centers.desktop_app;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import examination_centers.database.Database;
import examination_centers.entities.*;
import examination_centers.report_downloaders.*;
import jakarta.ws.rs.ClientErrorException;
import jakarta.ws.rs.client.Client;
import jakarta.ws.rs.client.ClientBuilder;
import jakarta.ws.rs.client.WebTarget;
import jakarta.ws.rs.core.MediaType;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Supervisor extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 4L;
	/**
     * Creates new form AdminApp
     */
    //selected are used by the selector listeners of the tables to move to next panel
    String id_userSelected;
    String id_classSelected;
    String id_examSelected;
    String openSelected;
    //comeFrom is used to know if the searchResultStudent panel's back button will go back to a specific class
    //or to the user profil panel, values {'user','class'}
    String comeFrom;
    String id_user;
    String username;
    String name;
    String lastname;
    String address;
    String phone;
    String email;
    String role;
    
    public Supervisor() {
        initComponents();
    }
    
    public Supervisor(String id_user,String username){
        this.id_userSelected="";
        this.id_classSelected="";
        this.id_examSelected="";
        this.openSelected="";
        this.id_user = id_user;
        this.username = username;
        try{
            Connection connection = new Database().getConnection();
            Statement statement = connection.createStatement();
            ResultSet rs;
            String sql = "select * from user where id_user = '"+this.id_user+"'";
            rs = statement.executeQuery(sql);
            if(rs.first()){
                this.username = rs.getString("username");
                this.name = rs.getString("name");
                this.lastname = rs.getString("lastname");
                this.address = rs.getString("address");
                this.phone = rs.getString("phone");
                this.email = rs.getString("email");
                this.role = "supervisor";
            }
            rs.close();
            connection.close();
        }catch(SQLException e){e.printStackTrace();}
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        generalPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        titleMessage = new javax.swing.JLabel();
        menuPanel = new javax.swing.JPanel();
        profilButton = new javax.swing.JButton();
        classesButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        containerPanel = new javax.swing.JPanel();
        profilPanel = new javax.swing.JPanel();
        usernameTitleLabel = new javax.swing.JLabel();
        profilUsernameLabel = new javax.swing.JLabel();
        lastnameTitleLabel = new javax.swing.JLabel();
        profilNameLabel = new javax.swing.JLabel();
        nameTitleLabel = new javax.swing.JLabel();
        profilLastnameLabel = new javax.swing.JLabel();
        phoneTitleLabel = new javax.swing.JLabel();
        profilPhoneLabel = new javax.swing.JLabel();
        addressTitleLabel = new javax.swing.JLabel();
        profilAddressLabel = new javax.swing.JLabel();
        emailTitleLabel = new javax.swing.JLabel();
        profilEmailLabel = new javax.swing.JLabel();
        roleTitleLabel = new javax.swing.JLabel();
        profilRoleLabel = new javax.swing.JLabel();
        classesPanel = new javax.swing.JPanel();
        classesTitleLabel = new javax.swing.JLabel();
        classesTitle2Label = new javax.swing.JLabel();
        classesTitle3Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classesTable = new javax.swing.JTable();
        classesErrorLabel = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        searchLastnameTextField = new javax.swing.JTextField();
        searchLastnameLabel = new javax.swing.JLabel();
        searchNameTextField = new javax.swing.JTextField();
        searchNameLabel = new javax.swing.JLabel();
        searchUsernameTextField = new javax.swing.JTextField();
        searchErrorLabel = new javax.swing.JLabel();
        searchTitleLabel = new javax.swing.JLabel();
        searchUsernameLabel = new javax.swing.JLabel();
        searchSubmitButton = new javax.swing.JButton();
        searchResultPanel = new javax.swing.JPanel();
        searchResultTitle2Label = new javax.swing.JLabel();
        searchResultUsernameLabel = new javax.swing.JLabel();
        searchResultUsername = new javax.swing.JLabel();
        searchResultNameLabel = new javax.swing.JLabel();
        searchResultName = new javax.swing.JLabel();
        searchResultLastnameLabel = new javax.swing.JLabel();
        searchResultLastname = new javax.swing.JLabel();
        searchResultAddressLabel = new javax.swing.JLabel();
        searchResultAddress = new javax.swing.JLabel();
        searchResultEmail = new javax.swing.JLabel();
        searchResultEmailLabel = new javax.swing.JLabel();
        searchResultPhone = new javax.swing.JLabel();
        searchResultPhoneLabel = new javax.swing.JLabel();
        searchResultRole = new javax.swing.JLabel();
        searchResultRoleLabel = new javax.swing.JLabel();
        searchResultTitleLabel = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        searchResultTable = new javax.swing.JTable();
        searchResultBackButton = new javax.swing.JButton();
        searchResultStudentPanel = new javax.swing.JPanel();
        searchResultStudentBackButton = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        searchResultStudentTable = new javax.swing.JTable();
        searchResultStudentTitleLabel = new javax.swing.JLabel();
        searchResultStudentRoleLabel = new javax.swing.JLabel();
        searchResultStudentRole = new javax.swing.JLabel();
        searchResultStudentPhoneLabel = new javax.swing.JLabel();
        searchResultStudentPhone = new javax.swing.JLabel();
        searchResultStudentEmailLabel = new javax.swing.JLabel();
        searchResultStudentEmail = new javax.swing.JLabel();
        searchResultStudentAddress = new javax.swing.JLabel();
        searchResultStudentAddressLabel = new javax.swing.JLabel();
        searchResultStudentLastname = new javax.swing.JLabel();
        searchResultStudentLastnameLabel = new javax.swing.JLabel();
        searchResultStudentName = new javax.swing.JLabel();
        searchResultStudentNameLabel = new javax.swing.JLabel();
        searchResultStudentUsername = new javax.swing.JLabel();
        searchResultStudentUsernameLabel = new javax.swing.JLabel();
        searchResultStudentTitle2Label = new javax.swing.JLabel();
        searchResultStudentId_class = new javax.swing.JLabel();
        searchResultStudentId_classLabel = new javax.swing.JLabel();
        searchResultStudentId_exam = new javax.swing.JLabel();
        searchResultStudentId_examLabel = new javax.swing.JLabel();
        classPanel = new javax.swing.JPanel();
        classTitleLabel = new javax.swing.JLabel();
        classId_classLabel = new javax.swing.JLabel();
        classId_class = new javax.swing.JLabel();
        classAddressLabel = new javax.swing.JLabel();
        classAddress = new javax.swing.JLabel();
        classNameLabel = new javax.swing.JLabel();
        className = new javax.swing.JLabel();
        classId_examLabel = new javax.swing.JLabel();
        classId_exam = new javax.swing.JLabel();
        classDateLabel = new javax.swing.JLabel();
        classDate = new javax.swing.JLabel();
        classStateLabel = new javax.swing.JLabel();
        classState = new javax.swing.JLabel();
        classBackButton = new javax.swing.JButton();
        classInsertButton = new javax.swing.JButton();
        classRemoveButton = new javax.swing.JButton();
        classStateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        classTable = new javax.swing.JTable();
        classErrorLabel = new javax.swing.JLabel();
        classDownloadReportButton = new javax.swing.JButton();
        insertClassPanel = new javax.swing.JPanel();
        insertClassLabel = new javax.swing.JLabel();
        insertClassId_classLabel = new javax.swing.JLabel();
        insertClassId_class = new javax.swing.JLabel();
        insertClassId_exam = new javax.swing.JLabel();
        insertClassId_examLabel = new javax.swing.JLabel();
        insertClassTitle1 = new javax.swing.JLabel();
        insertClassTitle2 = new javax.swing.JLabel();
        insertClassUsernameLabel = new javax.swing.JLabel();
        insertClassUsernameTextField = new javax.swing.JTextField();
        insertClassNameTextField = new javax.swing.JTextField();
        insertClassNameLabel = new javax.swing.JLabel();
        insertClassLastnameTextField = new javax.swing.JTextField();
        insertClassLastnameLabel = new javax.swing.JLabel();
        insertClassSubmitButton = new javax.swing.JButton();
        insertClassFileButton = new javax.swing.JButton();
        insertClassFileLabel2 = new javax.swing.JLabel();
        insertClassFileLabel = new javax.swing.JLabel();
        insertClassErrorLabel = new javax.swing.JLabel();
        insertClassBackButton = new javax.swing.JButton();
        removeClassPanel = new javax.swing.JPanel();
        removeClassLabel = new javax.swing.JLabel();
        removeClassId_classLabel = new javax.swing.JLabel();
        removeClassId_class = new javax.swing.JLabel();
        removeClassId_exam = new javax.swing.JLabel();
        removeClassId_examLabel = new javax.swing.JLabel();
        removeClassTitle2 = new javax.swing.JLabel();
        removeClassTitle1 = new javax.swing.JLabel();
        removeClassUsernameLabel = new javax.swing.JLabel();
        removeClassUsernameTextField = new javax.swing.JTextField();
        removeClassNameTextField = new javax.swing.JTextField();
        removeClassNameLabel = new javax.swing.JLabel();
        removeClassLastnameTextField = new javax.swing.JTextField();
        removeClassLastnameLabel = new javax.swing.JLabel();
        removeClassSubmitButton = new javax.swing.JButton();
        removeClassFileButton = new javax.swing.JButton();
        removeClassFileLabel2 = new javax.swing.JLabel();
        removeClassFileLabel = new javax.swing.JLabel();
        removeClassErrorLabel = new javax.swing.JLabel();
        removeClassBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Examination Centers");
        setName("generalFrame"); // NOI18N
        setResizable(false);

        generalPanel.setBackground(new java.awt.Color(66, 66, 66));
        generalPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        titlePanel.setBackground(new java.awt.Color(255, 255, 255));
        titlePanel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 5, 0, new java.awt.Color(68, 138, 255)));

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(68, 138, 255));
        title.setText("Examination Centers");

        titleMessage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        titleMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleMessage.setText("Logged in as : ");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(titlePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(titleMessage))
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                .addContainerGap())
        );

        titleMessage.setText("Logged in as : "+username);

        menuPanel.setBackground(new java.awt.Color(66, 66, 66));
        menuPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(68, 138, 255)));

        profilButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        profilButton.setForeground(new java.awt.Color(255, 255, 255));
        profilButton.setText("User Profil");
        profilButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(68, 138, 255)));
        profilButton.setContentAreaFilled(false);
        profilButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profilButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                profilButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                profilButtonMouseExited(evt);
            }
        });
        profilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profilButtonActionPerformed(evt);
            }
        });

        classesButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        classesButton.setForeground(new java.awt.Color(255, 255, 255));
        classesButton.setText("Examination Centers");
        classesButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(68, 138, 255)));
        classesButton.setContentAreaFilled(false);
        classesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                classesButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                classesButtonMouseExited(evt);
            }
        });
        classesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classesButtonActionPerformed(evt);
            }
        });

        logoutButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.setText("Exit");
        logoutButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(68, 138, 255)));
        logoutButton.setContentAreaFilled(false);
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutButtonMouseExited(evt);
            }
        });
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(68, 138, 255)));
        searchButton.setContentAreaFilled(false);
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchButtonMouseExited(evt);
            }
        });
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profilButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(classesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        containerPanel.setBackground(new java.awt.Color(255, 255, 255));
        containerPanel.setLayout(new java.awt.CardLayout());

        profilPanel.setBackground(new java.awt.Color(255, 255, 255));

        usernameTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        usernameTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        usernameTitleLabel.setText("Account ID");

        profilUsernameLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilUsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilUsernameLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilUsernameLabel.setOpaque(true);

        lastnameTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        lastnameTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lastnameTitleLabel.setText("Lastname");

        profilNameLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilNameLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilNameLabel.setOpaque(true);

        nameTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        nameTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameTitleLabel.setText("Name");

        profilLastnameLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilLastnameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilLastnameLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilLastnameLabel.setOpaque(true);

        phoneTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        phoneTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        phoneTitleLabel.setText("Phone");

        profilPhoneLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilPhoneLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilPhoneLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilPhoneLabel.setOpaque(true);

        addressTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        addressTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addressTitleLabel.setText("Address");

        profilAddressLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilAddressLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilAddressLabel.setOpaque(true);

        emailTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        emailTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailTitleLabel.setText("Email");

        profilEmailLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilEmailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilEmailLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilEmailLabel.setOpaque(true);

        roleTitleLabel.setBackground(new java.awt.Color(255, 255, 255));
        roleTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roleTitleLabel.setText("Role");

        profilRoleLabel.setBackground(new java.awt.Color(241, 241, 241));
        profilRoleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        profilRoleLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        profilRoleLabel.setOpaque(true);

        javax.swing.GroupLayout profilPanelLayout = new javax.swing.GroupLayout(profilPanel);
        profilPanel.setLayout(profilPanelLayout);
        profilPanelLayout.setHorizontalGroup(
            profilPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profilPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(profilEmailLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(emailTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profilAddressLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addressTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profilPhoneLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phoneTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profilLastnameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lastnameTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profilNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profilUsernameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addGroup(profilPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profilRoleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roleTitleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        profilPanelLayout.setVerticalGroup(
            profilPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profilPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTitleLabel)
                    .addComponent(roleTitleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(profilPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profilRoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profilUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(nameTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lastnameTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilLastnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(phoneTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addressTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(emailTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(359, Short.MAX_VALUE))
        );

        profilUsernameLabel.setText(this.username);
        profilNameLabel.setText(this.name);
        profilLastnameLabel.setText(this.lastname);
        profilPhoneLabel.setText(this.phone);
        profilAddressLabel.setText(this.address);
        profilEmailLabel.setText(this.email);
        profilRoleLabel.setText(this.role);

        containerPanel.add(profilPanel, "card2");

        classesPanel.setBackground(new java.awt.Color(255, 255, 255));

        classesTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        classesTitleLabel.setText("Examination Centers at which you are Supervisor");

        classesTitle2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        classesTitle2Label.setText("Click on the examination centers to see more info");

        classesTitle3Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        classesTitle3Label.setText("about the students");

        classesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exam.Center ID", "Exam.Center Name", "Exam State", "Exam Date", "Class", "Number of Participates"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ListSelectionModel selectionModelClasses = classesTable.getSelectionModel();
        selectionModelClasses.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e){
                if(classesTable.getSelectedRow()>-1){
                    id_classSelected = classesTable.getValueAt(classesTable.getSelectedRow(), 0).toString();
                    containerPanel.removeAll();
                    containerPanel.add(classPanel);
                    containerPanel.repaint();
                    containerPanel.revalidate();
                    classBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
                    try{
                        Connection connection = new Database().getConnection();
                        Statement statement = connection.createStatement();
                        String sql = "select * from examination,class where class.id_class = '"+id_classSelected+"'"
                        + " and examination.id_examination = class.id_examination";
                        ResultSet rs = statement.executeQuery(sql);
                        String open = "";
                        if(rs.first()){
                            classId_class.setText(rs.getString("class.id_class"));
                            classId_exam.setText(rs.getString("examination.id_examination"));
                            className.setText(rs.getString("class.name"));
                            classAddress.setText(rs.getString("class.address"));
                            classDate.setText(rs.getString("examination.date"));
                            openSelected = rs.getString("examination.open");
                            if(openSelected.equals("0")){
                                classStateButton.setText("Start Exam");
                                open = "initial";
                            }else if(openSelected.equals("1")){
                                classStateButton.setText("Finish Exam");
                                open = "running";
                            }else if(openSelected.equals("2")){
                                classStateButton.setText("Reset Exam");
                                open = "finished";
                            }
                            classState.setText(open);
                            id_examSelected = rs.getString("examination.id_examination");

                            //reset the table
                            DefaultTableModel modelClass = (DefaultTableModel) classTable.getModel();
                            int rowCount = modelClass.getRowCount();
                            for (int x = rowCount - 1; x >= 0; x--) {
                                modelClass.removeRow(x);
                            }
                            //call rest service and take the result
                            SupervisorClassReport_JerseyClient clientClass = new SupervisorClassReport_JerseyClient(id_classSelected);
                            String dataClass = clientClass.getJson();
                            if(dataClass.contains("no-result")){
                                classErrorLabel.setText("No results yet");
                            }else{
                                TypeToken<ArrayList<SupervisorClassReportResult>> tokenClass = new TypeToken<ArrayList<SupervisorClassReportResult>>() {};
                                ArrayList<SupervisorClassReportResult> classReport =new Gson().fromJson(dataClass, tokenClass.getType());
                                for(SupervisorClassReportResult st : classReport){
                                    modelClass.addRow(new String[]{
                                        st.getUsername(),
                                        st.getName(),
                                        st.getLastname(),
                                        st.getScore()
                                    });
                                }
                            }
                        }
                        connection.close();
                    }catch(SQLException e1){
                        e1.printStackTrace();
                    }
                }
            }
        });
        classesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(classesTable);

        classesErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout classesPanelLayout = new javax.swing.GroupLayout(classesPanel);
        classesPanel.setLayout(classesPanelLayout);
        classesPanelLayout.setHorizontalGroup(
            classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classesTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classesTitle2Label, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(classesPanelLayout.createSequentialGroup()
                        .addComponent(classesTitle3Label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(classesErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        classesPanelLayout.setVerticalGroup(
            classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classesTitleLabel)
                .addGap(18, 18, 18)
                .addComponent(classesTitle2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classesTitle3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(classesErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        containerPanel.add(classesPanel, "card4");

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));

        searchLastnameTextField.setBackground(new java.awt.Color(241, 241, 241));
        searchLastnameTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        searchLastnameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchLastnameLabel.setText("Lastname");

        searchNameTextField.setBackground(new java.awt.Color(241, 241, 241));
        searchNameTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        searchNameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchNameLabel.setText("Name");

        searchUsernameTextField.setBackground(new java.awt.Color(241, 241, 241));
        searchUsernameTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        searchErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
        searchErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        searchTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchTitleLabel.setText("Type user info to search");

        searchUsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchUsernameLabel.setText("Account");

        searchSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchSubmitButton.setText("Search");
        searchSubmitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
        searchSubmitButton.setContentAreaFilled(false);
        searchSubmitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchSubmitButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchSubmitButtonMouseExited(evt);
            }
        });
        searchSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchErrorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchLastnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 296, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchLastnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchUsernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchLastnameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchLastnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(464, Short.MAX_VALUE))
        );

        containerPanel.add(searchPanel, "card9");

        searchResultPanel.setBackground(new java.awt.Color(255, 255, 255));

        searchResultTitle2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultTitle2Label.setText("Exam centers in which they're assigned");

        searchResultUsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultUsernameLabel.setText("Accout");

        searchResultUsername.setBackground(new java.awt.Color(241, 241, 241));
        searchResultUsername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultUsername.setText("i");
        searchResultUsername.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultUsername.setOpaque(true);

        searchResultNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultNameLabel.setText("Name");

        searchResultName.setBackground(new java.awt.Color(241, 241, 241));
        searchResultName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultName.setText("i");
        searchResultName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultName.setOpaque(true);

        searchResultLastnameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultLastnameLabel.setText("Lastname");

        searchResultLastname.setBackground(new java.awt.Color(241, 241, 241));
        searchResultLastname.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultLastname.setText("i");
        searchResultLastname.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultLastname.setOpaque(true);

        searchResultAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultAddressLabel.setText("Address");

        searchResultAddress.setBackground(new java.awt.Color(241, 241, 241));
        searchResultAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultAddress.setText("i");
        searchResultAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultAddress.setOpaque(true);

        searchResultEmail.setBackground(new java.awt.Color(241, 241, 241));
        searchResultEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultEmail.setText("i");
        searchResultEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultEmail.setOpaque(true);

        searchResultEmailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultEmailLabel.setText("Email");

        searchResultPhone.setBackground(new java.awt.Color(241, 241, 241));
        searchResultPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultPhone.setText("i");
        searchResultPhone.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultPhone.setOpaque(true);

        searchResultPhoneLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultPhoneLabel.setText("Phone");

        searchResultRole.setBackground(new java.awt.Color(241, 241, 241));
        searchResultRole.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultRole.setText("i");
        searchResultRole.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultRole.setOpaque(true);

        searchResultRoleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchResultRoleLabel.setText("Role");

        searchResultTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchResultTitleLabel.setText("User info");

        searchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exam.Center ID", "Exam ID", "Date", "Class", "State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        //if he is a student, select one of his classes to show the results
        ListSelectionModel selectionModel = searchResultTable.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e){
                if(searchResultTable.getSelectedRow()>-1){
                    if(searchResultRole.getText().equals("student")){
                        containerPanel.removeAll();
                        containerPanel.add(searchResultStudentPanel);
                        containerPanel.repaint();
                        containerPanel.revalidate();
                        searchResultStudentUsername.setText(searchResultUsername.getText());
                        searchResultStudentName.setText(searchResultName.getText());
                        searchResultStudentLastname.setText(searchResultLastname.getText());
                        searchResultStudentAddress.setText(searchResultAddress.getText());
                        searchResultStudentPhone.setText(searchResultPhone.getText());
                        searchResultStudentEmail.setText(searchResultEmail.getText());
                        searchResultStudentRole.setText(searchResultRole.getText());
                        searchResultStudentId_exam.setText(searchResultTable.getValueAt(searchResultTable.getSelectedRow(), 1).toString());
                        searchResultStudentId_class.setText(searchResultTable.getValueAt(searchResultTable.getSelectedRow(), 0).toString());
                        comeFrom = "user";
                        //display the results of the student's exam to searchResultStudent panel
                        try{
                            //clear the table
                            DefaultTableModel modelResult = (DefaultTableModel) searchResultStudentTable.getModel();
                            int rowCount = modelResult.getRowCount();
                            for (int x = rowCount - 1; x >= 0; x--) {
                                modelResult.removeRow(x);
                            }

                            Connection connection = new Database().getConnection();
                            Statement statement = connection.createStatement();
                            Statement statement2 = connection.createStatement();
                            String sql = "";
                            ResultSet rs = null;
                            ResultSet rs2 = null;
                            String open = "";
                            String question = "";
                            String id_class = searchResultStudentId_class.getText();
                            String id_user = id_userSelected;
                            String correct = "";
                            String id_examination = "";
                            int c=0;
                            //get his class data
                            sql = "select * from class where id_class = '"+id_class+"'";
                            rs = statement.executeQuery(sql);
                            if(rs.first()){
                                id_examination = rs.getString("id_examination");
                            }
                            rs.close();
                            sql = "select * from examination where id_examination = '"+id_examination+"'";
                            rs = statement.executeQuery(sql);
                            if(rs.first()){
                                open = rs.getString("open");
                            }
                            rs.close();
                            //if the class is active or initial do not show exam data else show them
                            if(open.equals("1") || open.equals("0")){
                                searchResultStudentTitle2Label.setText("Exam hasn't finished yet");
                            }else if(open.equals("2")){
                                //check if the user participated to the exam
                                sql = "select count(*) from class_has_user where id_user = '"+id_user+"' and"
                                + " id_class = '"+id_class+"'";
                                rs = statement.executeQuery(sql);
                                if(rs.first()){
                                    c = rs.getInt("count(*)");
                                }
                                rs.close();
                                if(c==1){
                                    //user does not have any questions
                                    searchResultStudentTitle2Label.setText("Student didn't participate in this exam");
                                }else{
                                    searchResultStudentTitle2Label.setText("Student's marks");
                                    //take the user's questions
                                    sql = "select * from class_has_user where id_user = '"+id_user+"' and"
                                    + " id_class = '"+id_class+"'";
                                    rs = statement.executeQuery(sql);
                                    while(rs.next()){
                                        //find the question
                                        sql = "select question from question where id_question = '"+rs.getString("id_question")+"'";
                                        rs2 = statement2.executeQuery(sql);
                                        if(rs2.first()){
                                            question = rs2.getString("question");
                                        }
                                        rs2.close();
                                        //for every user's question, check if there is an answer
                                        if(rs.getString("answer").equals("")){
                                            //there is no answer. display only the question
                                            modelResult.addRow(new String[]{
                                                question,
                                                " - ",
                                                " - ",
                                                " - ",});
                                    }else{
                                        //set-up correct answer
                                        if(rs.getString("correct").equals("0")) correct = "wrong";
                                        else if(rs.getString("correct").equals("1")) correct = "correct";
                                        modelResult.addRow(new String[]{
                                            question,
                                            rs.getString("answer"),
                                            rs.getString("date"),
                                            correct});
                                }
                            }
                        }
                        connection.close();
                    }
                }catch(SQLException err){
                    err.printStackTrace();
                }
            }
        }
    }
    });
    searchResultTable.getTableHeader().setReorderingAllowed(false);
    jScrollPane8.setViewportView(searchResultTable);

    searchResultBackButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    searchResultBackButton.setText("Ξ Ξ―ΟƒΟ‰");
    searchResultBackButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    searchResultBackButton.setContentAreaFilled(false);
    searchResultBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            searchResultBackButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            searchResultBackButtonMouseExited(evt);
        }
    });
    searchResultBackButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchResultBackButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout searchResultPanelLayout = new javax.swing.GroupLayout(searchResultPanel);
    searchResultPanel.setLayout(searchResultPanelLayout);
    searchResultPanelLayout.setHorizontalGroup(
        searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchResultPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(searchResultTitle2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchResultPanelLayout.createSequentialGroup()
                    .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchResultPanelLayout.createSequentialGroup()
                            .addComponent(searchResultUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchResultName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(searchResultPanelLayout.createSequentialGroup()
                            .addComponent(searchResultUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchResultNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(searchResultRoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchResultRole, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(searchResultPanelLayout.createSequentialGroup()
                            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(searchResultLastnameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchResultLastname, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(searchResultPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchResultPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(searchResultPanelLayout.createSequentialGroup()
                            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(searchResultPhoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchResultPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(searchResultPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchResultPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGap(0, 13, Short.MAX_VALUE))
                .addComponent(jScrollPane8)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchResultPanelLayout.createSequentialGroup()
                    .addComponent(searchResultTitleLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchResultBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    searchResultPanelLayout.setVerticalGroup(
        searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchResultPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(searchResultBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchResultTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultUsernameLabel)
                .addComponent(searchResultNameLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(searchResultName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchResultUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultLastnameLabel)
                .addComponent(searchResultAddressLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultLastname)
                .addComponent(searchResultAddress))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultPhoneLabel)
                .addComponent(searchResultEmailLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultPhone)
                .addComponent(searchResultEmail))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(searchResultRoleLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(searchResultRole)
            .addGap(18, 18, 18)
            .addComponent(searchResultTitle2Label)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
            .addContainerGap())
    );

    containerPanel.add(searchResultPanel, "card10");

    searchResultStudentPanel.setBackground(new java.awt.Color(255, 255, 255));

    searchResultStudentBackButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    searchResultStudentBackButton.setText("Back");
    searchResultStudentBackButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    searchResultStudentBackButton.setContentAreaFilled(false);
    searchResultStudentBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            searchResultStudentBackButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            searchResultStudentBackButtonMouseExited(evt);
        }
    });
    searchResultStudentBackButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchResultStudentBackButtonActionPerformed(evt);
        }
    });

    searchResultStudentTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Question", "Answer", "Date", "Correct"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    searchResultStudentTable.getTableHeader().setReorderingAllowed(false);
    jScrollPane12.setViewportView(searchResultStudentTable);

    searchResultStudentTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    searchResultStudentTitleLabel.setText("User's info");

    searchResultStudentRoleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentRoleLabel.setText("Role");

    searchResultStudentRole.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentRole.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentRole.setText("i");
    searchResultStudentRole.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentRole.setOpaque(true);

    searchResultStudentPhoneLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentPhoneLabel.setText("Phone");

    searchResultStudentPhone.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentPhone.setText("i");
    searchResultStudentPhone.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentPhone.setOpaque(true);

    searchResultStudentEmailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentEmailLabel.setText("Email");

    searchResultStudentEmail.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentEmail.setText("i");
    searchResultStudentEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentEmail.setOpaque(true);

    searchResultStudentAddress.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentAddress.setText("i");
    searchResultStudentAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentAddress.setOpaque(true);

    searchResultStudentAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentAddressLabel.setText("Address");

    searchResultStudentLastname.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentLastname.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentLastname.setText("i");
    searchResultStudentLastname.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentLastname.setOpaque(true);

    searchResultStudentLastnameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentLastnameLabel.setText("Lastname");

    searchResultStudentName.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentName.setText("i");
    searchResultStudentName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentName.setOpaque(true);

    searchResultStudentNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentNameLabel.setText("Name");

    searchResultStudentUsername.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentUsername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentUsername.setText("i");
    searchResultStudentUsername.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentUsername.setOpaque(true);

    searchResultStudentUsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentUsernameLabel.setText("Accout");

    searchResultStudentTitle2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentTitle2Label.setText("Marks");

    searchResultStudentId_class.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentId_class.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentId_class.setText("i");
    searchResultStudentId_class.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentId_class.setOpaque(true);

    searchResultStudentId_classLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentId_classLabel.setText("Examination Center ID");

    searchResultStudentId_exam.setBackground(new java.awt.Color(241, 241, 241));
    searchResultStudentId_exam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentId_exam.setText("i");
    searchResultStudentId_exam.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    searchResultStudentId_exam.setOpaque(true);

    searchResultStudentId_examLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    searchResultStudentId_examLabel.setText("Examination ID");

    javax.swing.GroupLayout searchResultStudentPanelLayout = new javax.swing.GroupLayout(searchResultStudentPanel);
    searchResultStudentPanel.setLayout(searchResultStudentPanelLayout);
    searchResultStudentPanelLayout.setHorizontalGroup(
        searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(searchResultStudentTitle2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane12)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchResultStudentPanelLayout.createSequentialGroup()
                    .addComponent(searchResultStudentTitleLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchResultStudentBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                    .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                            .addComponent(searchResultStudentUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchResultStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                            .addComponent(searchResultStudentUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchResultStudentNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(searchResultStudentLastnameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchResultStudentLastname, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultStudentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchResultStudentPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultStudentAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(searchResultStudentPhoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchResultStudentPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultStudentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchResultStudentPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(searchResultStudentEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchResultStudentRoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchResultStudentRole, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchResultStudentId_classLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchResultStudentId_class, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(searchResultStudentId_examLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchResultStudentId_exam, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 13, Short.MAX_VALUE)))
            .addContainerGap())
    );
    searchResultStudentPanelLayout.setVerticalGroup(
        searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(searchResultStudentBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchResultStudentTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultStudentUsernameLabel)
                .addComponent(searchResultStudentNameLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(searchResultStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchResultStudentUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultStudentLastnameLabel)
                .addComponent(searchResultStudentAddressLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultStudentLastname)
                .addComponent(searchResultStudentAddress))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultStudentPhoneLabel)
                .addComponent(searchResultStudentEmailLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchResultStudentPhone)
                .addComponent(searchResultStudentEmail))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(searchResultStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                    .addComponent(searchResultStudentRoleLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchResultStudentRole))
                .addGroup(searchResultStudentPanelLayout.createSequentialGroup()
                    .addComponent(searchResultStudentId_classLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchResultStudentId_class)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(searchResultStudentId_examLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(searchResultStudentId_exam)
            .addGap(18, 18, 18)
            .addComponent(searchResultStudentTitle2Label)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
            .addContainerGap())
    );

    containerPanel.add(searchResultStudentPanel, "card11");

    classPanel.setBackground(new java.awt.Color(255, 255, 255));

    classTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    classTitleLabel.setText("Examination Center");

    classId_classLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classId_classLabel.setText("Examination Center ID");

    classId_class.setBackground(new java.awt.Color(241, 241, 241));
    classId_class.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classId_class.setText("g");
    classId_class.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    classId_class.setOpaque(true);

    classAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classAddressLabel.setText("Address");

    classAddress.setBackground(new java.awt.Color(241, 241, 241));
    classAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classAddress.setText("g");
    classAddress.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    classAddress.setOpaque(true);

    classNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classNameLabel.setText("Name");

    className.setBackground(new java.awt.Color(241, 241, 241));
    className.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    className.setText("g");
    className.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    className.setOpaque(true);

    classId_examLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classId_examLabel.setText("Examination ID");

    classId_exam.setBackground(new java.awt.Color(241, 241, 241));
    classId_exam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classId_exam.setText("g");
    classId_exam.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    classId_exam.setOpaque(true);

    classDateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classDateLabel.setText("Start Date");

    classDate.setBackground(new java.awt.Color(241, 241, 241));
    classDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classDate.setText("g");
    classDate.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    classDate.setOpaque(true);

    classStateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classStateLabel.setText("State");

    classState.setBackground(new java.awt.Color(241, 241, 241));
    classState.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    classState.setText("g");
    classState.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    classState.setOpaque(true);

    classBackButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    classBackButton.setText("Back");
    classBackButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    classBackButton.setContentAreaFilled(false);
    classBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            classBackButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            classBackButtonMouseExited(evt);
        }
    });
    classBackButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            classBackButtonActionPerformed(evt);
        }
    });

    classInsertButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    classInsertButton.setText("Add Students");
    classInsertButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    classInsertButton.setContentAreaFilled(false);
    classInsertButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            classInsertButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            classInsertButtonMouseExited(evt);
        }
    });
    classInsertButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            classInsertButtonActionPerformed(evt);
        }
    });

    classRemoveButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    classRemoveButton.setText("Remove Students");
    classRemoveButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    classRemoveButton.setContentAreaFilled(false);
    classRemoveButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            classRemoveButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            classRemoveButtonMouseExited(evt);
        }
    });
    classRemoveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            classRemoveButtonActionPerformed(evt);
        }
    });

    classStateButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    classStateButton.setText("State Exam");
    classStateButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    classStateButton.setContentAreaFilled(false);
    classStateButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            classStateButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            classStateButtonMouseExited(evt);
        }
    });
    classStateButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            classStateButtonActionPerformed(evt);
        }
    });

    classTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Account", "Name", "Lastname", "mark"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    //if he click into a user, show his results for this exam
    ListSelectionModel selectionClassModel = classTable.getSelectionModel();
    selectionClassModel.addListSelectionListener(new ListSelectionListener(){
        public void valueChanged(ListSelectionEvent e){
            if(classTable.getSelectedRow()>-1){
                containerPanel.removeAll();
                containerPanel.add(searchResultStudentPanel);
                containerPanel.repaint();
                containerPanel.revalidate();
                searchResultStudentId_exam.setText(id_examSelected);
                searchResultStudentId_class.setText(id_classSelected);
                comeFrom = "class";
                //display the results of the student's exam to searchResultStudent panel
                try{
                    //clear the table
                    DefaultTableModel modelResult = (DefaultTableModel) searchResultStudentTable.getModel();
                    int rowCount = modelResult.getRowCount();
                    for (int x = rowCount - 1; x >= 0; x--) {
                        modelResult.removeRow(x);
                    }
                    Connection connection = new Database().getConnection();
                    Statement statement = connection.createStatement();
                    Statement statement2 = connection.createStatement();
                    String sql = "";
                    ResultSet rs = null;
                    ResultSet rs2 = null;
                    String open = "";
                    String question = "";
                    String id_class = id_classSelected;
                    String id_user = "";
                    String correct = "";
                    String id_examination = "";
                    int c=0;
                    //get users info
                    String username = classTable.getValueAt(classTable.getSelectedRow(), 0).toString();
                    String name = classTable.getValueAt(classTable.getSelectedRow(), 1).toString();
                    String lastname = classTable.getValueAt(classTable.getSelectedRow(), 2).toString();
                    sql = "select * from user where username = '"+username+"' and name = '"+name+"' and lastname = '"+lastname+"'";
                    rs = statement.executeQuery(sql);
                    if(rs.first()){
                        searchResultStudentUsername.setText(rs.getString("username"));
                        searchResultStudentName.setText(rs.getString("name"));
                        searchResultStudentLastname.setText(rs.getString("lastname"));
                        searchResultStudentAddress.setText(rs.getString("address"));
                        searchResultStudentPhone.setText(rs.getString("phone"));
                        searchResultStudentEmail.setText(rs.getString("email"));
                        searchResultStudentRole.setText("Student");
                        id_user = rs.getString("id_user");
                    }
                    rs.close();
                    //get his class data
                    sql = "select * from class where id_class = '"+id_class+"'";
                    rs = statement.executeQuery(sql);
                    if(rs.first()){
                        id_examination = rs.getString("id_examination");
                    }
                    rs.close();
                    sql = "select * from examination where id_examination = '"+id_examination+"'";
                    rs = statement.executeQuery(sql);
                    if(rs.first()){
                        open = rs.getString("open");
                    }
                    rs.close();
                    //if the class is active or initial do not show exam data else show them
                    if(open.equals("1") || open.equals("0")){
                        searchResultStudentTitle2Label.setText("Exam hasn't finished yet");
                    }else if(open.equals("2")){
                        //check if the user participated to the exam
                        sql = "select count(*) from class_has_user where id_user = '"+id_user+"' and"
                        + " id_class = '"+id_class+"'";
                        rs = statement.executeQuery(sql);
                        if(rs.first()){
                            c = rs.getInt("count(*)");
                        }
                        rs.close();
                        if(c==1){System.out.print("c = 1");
                            //user does not have any questions
                            searchResultStudentTitle2Label.setText("Student didn't participate to this exam");
                        }else{System.out.print("c != 1");
                            searchResultStudentTitle2Label.setText("Student's marks");
                            //take the user's questions
                            sql = "select * from class_has_user where id_user = '"+id_user+"' and"
                            + " id_class = '"+id_class+"'";
                            rs = statement.executeQuery(sql);
                            while(rs.next()){
                                //find the question
                                sql = "select question from question where id_question = '"+rs.getString("id_question")+"'";
                                rs2 = statement2.executeQuery(sql);
                                if(rs2.first()){
                                    question = rs2.getString("question");
                                }
                                rs2.close();
                                //for every user's question, check if there is an answer
                                if(rs.getString("answer").equals("")){
                                    //there is no answer. display only the question
                                    modelResult.addRow(new String[]{
                                        question,
                                        " - ",
                                        " - ",
                                        " - ",});
                            }else{
                                //set-up correct answer
                                if(rs.getString("correct").equals("0")) correct = "wrong";
                                else if(rs.getString("correct").equals("1")) correct = "correct";
                                modelResult.addRow(new String[]{
                                    question,
                                    rs.getString("answer"),
                                    rs.getString("date"),
                                    correct});
                        }
                    }
                }
                connection.close();
            }
        }catch(SQLException err){
            err.printStackTrace();
        }

    }
    }
    });
    classTable.getTableHeader().setReorderingAllowed(false);
    jScrollPane2.setViewportView(classTable);

    classErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    classDownloadReportButton.setText("Download");
    classDownloadReportButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            classDownloadReportButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout classPanelLayout = new javax.swing.GroupLayout(classPanel);
    classPanel.setLayout(classPanelLayout);
    classPanelLayout.setHorizontalGroup(
        classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(classPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(classPanelLayout.createSequentialGroup()
                    .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(classId_classLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classId_class, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(classAddressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(classAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(classNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(className, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(classId_examLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classId_exam, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classDate, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classState, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(classPanelLayout.createSequentialGroup()
                    .addComponent(classTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(classBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(classPanelLayout.createSequentialGroup()
                    .addComponent(classInsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                    .addComponent(classRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(classPanelLayout.createSequentialGroup()
                    .addComponent(classDownloadReportButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classStateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(classErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    classPanelLayout.setVerticalGroup(
        classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(classPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(classTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(classBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(classInsertButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addComponent(classRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(classPanelLayout.createSequentialGroup()
                    .addComponent(classId_classLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(classId_class)
                    .addGap(18, 18, 18)
                    .addComponent(classAddressLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(classAddress)
                    .addGap(18, 18, 18)
                    .addComponent(classNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(className))
                .addGroup(classPanelLayout.createSequentialGroup()
                    .addComponent(classId_examLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(classId_exam)
                    .addGap(18, 18, 18)
                    .addComponent(classDateLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(classDate)
                    .addGap(18, 18, 18)
                    .addComponent(classStateLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(classState)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
            .addComponent(classErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(classDownloadReportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(classStateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(8, 8, 8))
    );

    containerPanel.add(classPanel, "card7");

    insertClassPanel.setBackground(new java.awt.Color(255, 255, 255));

    insertClassLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    insertClassLabel.setText("Add Students");

    insertClassId_classLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassId_classLabel.setText("Examination Center ID");

    insertClassId_class.setBackground(new java.awt.Color(241, 241, 241));
    insertClassId_class.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassId_class.setText("d");
    insertClassId_class.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    insertClassId_class.setOpaque(true);

    insertClassId_exam.setBackground(new java.awt.Color(241, 241, 241));
    insertClassId_exam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassId_exam.setText("d");
    insertClassId_exam.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    insertClassId_exam.setOpaque(true);

    insertClassId_examLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassId_examLabel.setText("Exam ID");

    insertClassTitle1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    insertClassTitle1.setText("Insert data using excel file");

    insertClassTitle2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    insertClassTitle2.setText("Insert data using form");

    insertClassUsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassUsernameLabel.setText("Account");

    insertClassUsernameTextField.setBackground(new java.awt.Color(241, 241, 241));
    insertClassUsernameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassUsernameTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertClassUsernameTextFieldActionPerformed(evt);
        }
    });

    insertClassNameTextField.setBackground(new java.awt.Color(241, 241, 241));
    insertClassNameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    insertClassNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassNameLabel.setText("Name");

    insertClassLastnameTextField.setBackground(new java.awt.Color(241, 241, 241));
    insertClassLastnameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    insertClassLastnameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    insertClassLastnameLabel.setText("Lastname");

    insertClassSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    insertClassSubmitButton.setText("Submit");
    insertClassSubmitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    insertClassSubmitButton.setContentAreaFilled(false);
    insertClassSubmitButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            insertClassSubmitButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            insertClassSubmitButtonMouseExited(evt);
        }
    });
    insertClassSubmitButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertClassSubmitButtonActionPerformed(evt);
        }
    });

    insertClassFileButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    insertClassFileButton.setText("Select excel file");
    insertClassFileButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertClassFileButtonActionPerformed(evt);
        }
    });

    insertClassFileLabel2.setText("The first line of excel is used for the titles");

    insertClassFileLabel.setText("Format: same as the form shown");

    insertClassErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
    insertClassErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    insertClassBackButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    insertClassBackButton.setText("Back");
    insertClassBackButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    insertClassBackButton.setContentAreaFilled(false);
    insertClassBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            insertClassBackButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            insertClassBackButtonMouseExited(evt);
        }
    });
    insertClassBackButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertClassBackButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout insertClassPanelLayout = new javax.swing.GroupLayout(insertClassPanel);
    insertClassPanel.setLayout(insertClassPanelLayout);
    insertClassPanelLayout.setHorizontalGroup(
        insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(insertClassPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(insertClassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(insertClassPanelLayout.createSequentialGroup()
                    .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(insertClassSubmitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertClassLastnameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(insertClassLastnameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertClassNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(insertClassNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertClassUsernameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(insertClassUsernameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertClassTitle2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(insertClassId_classLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertClassId_class, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                    .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(insertClassFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(insertClassTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(insertClassFileLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(insertClassFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(insertClassPanelLayout.createSequentialGroup()
                    .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(insertClassId_examLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insertClassId_exam, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(insertClassBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(insertClassErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    insertClassPanelLayout.setVerticalGroup(
        insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(insertClassPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(insertClassLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(insertClassId_examLabel)
                .addComponent(insertClassBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(insertClassId_exam)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(insertClassErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(insertClassTitle1)
                .addComponent(insertClassTitle2))
            .addGap(18, 18, 18)
            .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(insertClassUsernameLabel)
                .addComponent(insertClassFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(insertClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(insertClassPanelLayout.createSequentialGroup()
                    .addComponent(insertClassUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(insertClassNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(insertClassNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(insertClassLastnameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(insertClassLastnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(insertClassId_classLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(insertClassId_class))
                .addGroup(insertClassPanelLayout.createSequentialGroup()
                    .addComponent(insertClassFileLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(insertClassFileButton)))
            .addGap(34, 34, 34)
            .addComponent(insertClassSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(290, Short.MAX_VALUE))
    );

    containerPanel.add(insertClassPanel, "card8");

    removeClassPanel.setBackground(new java.awt.Color(255, 255, 255));

    removeClassLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    removeClassLabel.setText("Remove students");

    removeClassId_classLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassId_classLabel.setText("Examination Center ID");

    removeClassId_class.setBackground(new java.awt.Color(241, 241, 241));
    removeClassId_class.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassId_class.setText("d");
    removeClassId_class.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    removeClassId_class.setOpaque(true);

    removeClassId_exam.setBackground(new java.awt.Color(241, 241, 241));
    removeClassId_exam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassId_exam.setText("d");
    removeClassId_exam.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
    removeClassId_exam.setOpaque(true);

    removeClassId_examLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassId_examLabel.setText("Exam ID");

    removeClassTitle2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    removeClassTitle2.setText("Insert data using Excel file");

    removeClassTitle1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    removeClassTitle1.setText("Insert data using form");

    removeClassUsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassUsernameLabel.setText("Account");

    removeClassUsernameTextField.setBackground(new java.awt.Color(241, 241, 241));
    removeClassUsernameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassUsernameTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeClassUsernameTextFieldActionPerformed(evt);
        }
    });

    removeClassNameTextField.setBackground(new java.awt.Color(241, 241, 241));
    removeClassNameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    removeClassNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassNameLabel.setText("Name");

    removeClassLastnameTextField.setBackground(new java.awt.Color(241, 241, 241));
    removeClassLastnameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    removeClassLastnameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    removeClassLastnameLabel.setText("Lastname");

    removeClassSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    removeClassSubmitButton.setText("Submit");
    removeClassSubmitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    removeClassSubmitButton.setContentAreaFilled(false);
    removeClassSubmitButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            removeClassSubmitButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            removeClassSubmitButtonMouseExited(evt);
        }
    });
    removeClassSubmitButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeClassSubmitButtonActionPerformed(evt);
        }
    });

    removeClassFileButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    removeClassFileButton.setText("Select Excel file");
    removeClassFileButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeClassFileButtonActionPerformed(evt);
        }
    });

    removeClassFileLabel2.setText("The first line is used for the titles");

    removeClassFileLabel.setText("Format: same as the form shown");

    removeClassErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
    removeClassErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    removeClassBackButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    removeClassBackButton.setText("Back");
    removeClassBackButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(68, 138, 255)));
    removeClassBackButton.setContentAreaFilled(false);
    removeClassBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            removeClassBackButtonMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            removeClassBackButtonMouseExited(evt);
        }
    });
    removeClassBackButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeClassBackButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout removeClassPanelLayout = new javax.swing.GroupLayout(removeClassPanel);
    removeClassPanel.setLayout(removeClassPanelLayout);
    removeClassPanelLayout.setHorizontalGroup(
        removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(removeClassPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(removeClassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(removeClassPanelLayout.createSequentialGroup()
                    .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(removeClassSubmitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeClassLastnameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(removeClassLastnameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeClassNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(removeClassNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeClassUsernameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(removeClassUsernameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeClassTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(removeClassId_classLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeClassId_class, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                    .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(removeClassFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeClassTitle2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(removeClassFileLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeClassFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(removeClassPanelLayout.createSequentialGroup()
                    .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(removeClassId_examLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeClassId_exam, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeClassBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(removeClassErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    removeClassPanelLayout.setVerticalGroup(
        removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(removeClassPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(removeClassLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(removeClassId_examLabel)
                .addComponent(removeClassBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(removeClassId_exam)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(removeClassErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(removeClassTitle2)
                .addComponent(removeClassTitle1))
            .addGap(18, 18, 18)
            .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(removeClassUsernameLabel)
                .addComponent(removeClassFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(removeClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(removeClassPanelLayout.createSequentialGroup()
                    .addComponent(removeClassUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(removeClassNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(removeClassNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(removeClassLastnameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(removeClassLastnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(removeClassId_classLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(removeClassId_class))
                .addGroup(removeClassPanelLayout.createSequentialGroup()
                    .addComponent(removeClassFileLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(removeClassFileButton)))
            .addGap(34, 34, 34)
            .addComponent(removeClassSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(290, Short.MAX_VALUE))
    );

    containerPanel.add(removeClassPanel, "card8");

    javax.swing.GroupLayout generalPanelLayout = new javax.swing.GroupLayout(generalPanel);
    generalPanel.setLayout(generalPanelLayout);
    generalPanelLayout.setHorizontalGroup(
        generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
        .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(generalPanelLayout.createSequentialGroup()
            .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    generalPanelLayout.setVerticalGroup(
        generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(generalPanelLayout.createSequentialGroup()
            .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(generalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(generalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void profilButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilButtonMouseEntered

        profilButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1, Color.decode("0x448AFF")));
        menuPanel.repaint();
    }//GEN-LAST:event_profilButtonMouseEntered

    private void profilButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilButtonMouseExited

        profilButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.decode("0x448AFF")));
        menuPanel.repaint();
    }//GEN-LAST:event_profilButtonMouseExited

    private void classesButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classesButtonMouseEntered

        classesButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1, Color.decode("0x448AFF")));
        menuPanel.repaint();
    }

    private void classesButtonMouseExited(java.awt.event.MouseEvent evt) {

        classesButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.decode("0x448AFF")));
        menuPanel.repaint();
    }//GEN-LAST:event_classesButtonMouseExited

    private void logoutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseEntered

        logoutButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1, Color.decode("0x448AFF")));
        menuPanel.repaint();
    }//GEN-LAST:event_logoutButtonMouseEntered

    private void logoutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseExited
    
        logoutButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.decode("0x448AFF")));
        menuPanel.repaint();
    }//GEN-LAST:event_logoutButtonMouseExited

    private void profilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profilButtonActionPerformed
 
        containerPanel.removeAll();
        containerPanel.add(profilPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        
        profilButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        classesButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
        menuPanel.repaint();
        searchButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
        
        profilUsernameLabel.setText(this.username);
        profilNameLabel.setText(this.name);
        profilLastnameLabel.setText(this.lastname);
        profilPhoneLabel.setText(this.phone);
        profilAddressLabel.setText(this.address);
        profilEmailLabel.setText(this.email);
        profilRoleLabel.setText(this.role);
    }//GEN-LAST:event_profilButtonActionPerformed

    private void classesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classesButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(classesPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        
        classesButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        profilButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
        searchButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
        menuPanel.repaint();
        
        //reset the table
        DefaultTableModel modelClasses = (DefaultTableModel) classesTable.getModel();
        int rowCount = modelClasses.getRowCount();
        for (int x = rowCount - 1; x >= 0; x--) {
            modelClasses.removeRow(x);
        }
        //call rest service and take the result
        SupervisorClassesReport_JerseyClient client = new SupervisorClassesReport_JerseyClient(this.id_user);
        String dataClasses = client.getJson();
        if(dataClasses.isEmpty()){
            classesErrorLabel.setText("No results found");
        }else{
            TypeToken<ArrayList<SupervisorClassesReportResult>> tokenExam = new TypeToken<ArrayList<SupervisorClassesReportResult>>() {};
            ArrayList<SupervisorClassesReportResult> classesReport =new Gson().fromJson(dataClasses, tokenExam.getType());
            String state = "";
            for(SupervisorClassesReportResult st : classesReport){
                if(st.getExamOpen().equals("0")) state = "initial";
                else if(st.getExamOpen().equals("1")) state = "running";
                else if(st.getExamOpen().equals("2")) state = "finished";
                modelClasses.addRow(new String[]{
                    st.getId_class(),
                    st.getClassName(),
                    state,
                    st.getExamDate(),
                    st.getSubjectTitle(),
                    st.getNumberOfStudents()
                });
            }
        }
    }//GEN-LAST:event_classesButtonActionPerformed

    private void profilButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilButtonMouseClicked

    }//GEN-LAST:event_profilButtonMouseClicked

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed

        this.dispose();
        Login login = new Login();
        login.setVisible(true);
        login.setLocationRelativeTo(null);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void searchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseEntered

        searchButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1, Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchButtonMouseEntered

    private void searchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseExited

        searchButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchButtonMouseExited

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(searchPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        
        searchButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        classesButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
        profilButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
        menuPanel.repaint();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchSubmitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchSubmitButtonMouseEntered

        searchSubmitButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchSubmitButtonMouseEntered

    private void searchSubmitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchSubmitButtonMouseExited

        searchSubmitButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchSubmitButtonMouseExited

    private void searchSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSubmitButtonActionPerformed
 
        String regex = "[a-zA-Z]{1,}[a-zA-Z0-9]*";
        String username = searchUsernameTextField.getText();
        String name = searchNameTextField.getText();
        String lastname = searchLastnameTextField.getText();
        if(username.isEmpty() || name.isEmpty() || lastname.isEmpty()){
            searchErrorLabel.setText("All fields must be filled");
        }else{
            if(username.matches(regex) && name.matches(regex) && lastname.matches(regex)){
                try{
                    Connection connection = new Database().getConnection();
                    Statement statement = connection.createStatement();
                    String id_user="";
                    String phone="";
                    String address="";
                    String email="";
                    String role="";
                    String sql;
                    ResultSet rs;
                    boolean flag = true;
                    //see if the user exists
                    sql = "select count(*) from user where name = '"+name+"' and username = '"+username+"'"
                            + " and lastname = '"+lastname+"'";
                    rs = statement.executeQuery(sql);
                    if(rs.first()){
                        if(rs.getInt("count(*)")<1)
                            flag = false;
                    }
                    rs.close();
                    if(flag){
                        sql = "select * from user where name = '"+name+"' and username = '"+username+"'"
                            + " and lastname = '"+lastname+"'";
                        rs = statement.executeQuery(sql);
                        if(rs.first()){
                            id_userSelected = rs.getString("id_user");
                            id_user = rs.getString("id_user");
                            phone = rs.getString("phone");
                            address = rs.getString("address");
                            email = rs.getString("email");
                            if(rs.getInt("role")==1) role = "supervisor";
                            else if(rs.getInt("role")==2) role = "student";
                            else if(rs.getInt("role")==0) role = "admin";
                        }
                        rs.close();
                        searchResultUsername.setText(username);
                        searchResultName.setText(name);
                        searchResultLastname.setText(lastname);
                        searchResultPhone.setText(phone);
                        searchResultAddress.setText(address);
                        searchResultEmail.setText(email);
                        searchResultRole.setText(role);
                        containerPanel.removeAll();
                        containerPanel.add(searchResultPanel);
                        containerPanel.repaint();
                        containerPanel.revalidate();
                        
                        DefaultTableModel modelSearch = (DefaultTableModel) searchResultTable.getModel();
                        int rowCount = modelSearch.getRowCount();
                        for (int x = rowCount - 1; x >= 0; x--) {
                            modelSearch.removeRow(x);
                        }
                        sql = "select count(distinct id_class) from class_has_user where id_user = '"+id_user+"'";
                        rs = statement.executeQuery(sql);
                        flag = false;
                        if(rs.first()){
                            if(rs.getInt("count(distinct id_class)")>0){
                                flag = true;
                            }
                        }
                        rs.close();
                        if(flag){
                            //find all classes of student
                            sql = "select * from class_has_user,class,examination,subject where id_user = '"+id_user+"'"
                                    + " and class_has_user.id_class = class.id_class and"
                                    + " class.id_examination = examination.id_examination"
                                    + " and examination.id_subject = subject.id_subject group by class.id_class";
                            rs = statement.executeQuery(sql);
                            String type = "";
                            while(rs.next()){
                                if(rs.getString("examination.open").equals("0")) type = "Ξ‘Ο�Ο‡ΞΉΞΊΞ®";
                                else if(rs.getString("examination.open").equals("1")) type = "Ξ£Ξµ Ξ›ΞµΞΉΟ„ΞΏΟ…Ο�Ξ³Ξ―Ξ±";
                                else if(rs.getString("examination.open").equals("2")) type = "Ξ�Ξ»ΞΏΞΊΞ»Ξ·Ο�Ο‰ΞΌΞ­Ξ½Ξ·";
                                modelSearch.addRow(new String[]{rs.getString("class.id_class"),rs.getString("examination.id_examination"),rs.getString("examination.date"),rs.getString("subject.title"),type});
                            }
                        }
                    }else{
                        searchErrorLabel.setText("Cannot find user with this data");
                    }
                    connection.close();
                }catch(SQLException e){
                    e.printStackTrace();
                }  
            }else{
                searchErrorLabel.setText("Only alpharithmetics longer than 5 characters required");
            }     
        }    
    }//GEN-LAST:event_searchSubmitButtonActionPerformed

    private void searchResultBackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultBackButtonMouseEntered

        searchResultBackButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchResultBackButtonMouseEntered

    private void searchResultBackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultBackButtonMouseExited

        searchResultBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchResultBackButtonMouseExited

    private void searchResultBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchResultBackButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(searchPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
    }//GEN-LAST:event_searchResultBackButtonActionPerformed

    private void searchResultStudentBackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultStudentBackButtonMouseEntered

        searchResultStudentBackButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchResultStudentBackButtonMouseEntered

    private void searchResultStudentBackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultStudentBackButtonMouseExited

        searchResultStudentBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_searchResultStudentBackButtonMouseExited

    private void searchResultStudentBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchResultStudentBackButtonActionPerformed

        containerPanel.removeAll();
        if(comeFrom.equals("user")){
            containerPanel.add(searchResultPanel);
        }else if(comeFrom.equals("class")){
            containerPanel.add(classPanel);
        }
        containerPanel.repaint();
        containerPanel.revalidate();
    }//GEN-LAST:event_searchResultStudentBackButtonActionPerformed

    private void classBackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classBackButtonMouseEntered

        classBackButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classBackButtonMouseEntered

    private void classBackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classBackButtonMouseExited

        classBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classBackButtonMouseExited

    private void classBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classBackButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(classesPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        
        //refresh the previus table
        //reset the table
        DefaultTableModel modelClasses = (DefaultTableModel) classesTable.getModel();
        int rowCount = modelClasses.getRowCount();
        for (int x = rowCount - 1; x >= 0; x--) {
            modelClasses.removeRow(x);
        }
        //call rest service and take the result
        SupervisorClassesReport_JerseyClient client = new SupervisorClassesReport_JerseyClient(this.id_user);
        String dataClasses = client.getJson();
        if(dataClasses.isEmpty()){
            classesErrorLabel.setText("No results found");
        }else{
            TypeToken<ArrayList<SupervisorClassesReportResult>> tokenExam = new TypeToken<ArrayList<SupervisorClassesReportResult>>() {};
            ArrayList<SupervisorClassesReportResult> classesReport =new Gson().fromJson(dataClasses, tokenExam.getType());
            String state = "";
            for(SupervisorClassesReportResult st : classesReport){
                if(st.getExamOpen().equals("0")) state = "initial";
                else if(st.getExamOpen().equals("1")) state = "running";
                else if(st.getExamOpen().equals("2")) state = "finished";
                modelClasses.addRow(new String[]{
                    st.getId_class(),
                    st.getClassName(),
                    state,
                    st.getExamDate(),
                    st.getSubjectTitle(),
                    st.getNumberOfStudents()
                });
            }
        }
    }//GEN-LAST:event_classBackButtonActionPerformed

    private void classInsertButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classInsertButtonMouseEntered

        classInsertButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classInsertButtonMouseEntered

    private void classInsertButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classInsertButtonMouseExited

        classInsertButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classInsertButtonMouseExited

    private void classInsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classInsertButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(insertClassPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        insertClassId_exam.setText(id_examSelected);
        insertClassId_class.setText(id_classSelected);
        insertClassBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classInsertButtonActionPerformed

    private void classRemoveButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classRemoveButtonMouseEntered
  
        classRemoveButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classRemoveButtonMouseEntered

    private void classRemoveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classRemoveButtonMouseExited

        classRemoveButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classRemoveButtonMouseExited

    private void classRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classRemoveButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(removeClassPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        removeClassId_exam.setText(id_examSelected);
        removeClassId_class.setText(id_classSelected);
        removeClassBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classRemoveButtonActionPerformed

    private void classStateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classStateButtonMouseEntered

        classStateButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classStateButtonMouseEntered

    private void classStateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classStateButtonMouseExited

        classStateButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_classStateButtonMouseExited

    private void classStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classStateButtonActionPerformed

        //take the currect state of the exam, and switch to the next state
        try{
            Connection connection = new Database().getConnection();
            Statement statement = connection.createStatement();
            String sql = "";
            String choise = "0";
            if(openSelected.equals("0")){
                classState.setText("running");
                classStateButton.setText("Finish Exam");
                choise = "1";
            }else if(openSelected.equals("1")){
                classState.setText("Fnished");
                classStateButton.setText("Reset Exam");
                choise = "2";
            }else if(openSelected.equals("2")){
                classState.setText("Initial");
                choise = "0";
                classStateButton.setText("Start Exam");
            }
            sql = "update examination set open = '"+choise+"' where id_examination = '"+id_examSelected+"'";
            statement.executeUpdate(sql);
            openSelected = choise;
            
            //refresh the table with the right results
            sql = "select * from examination,class where class.id_class = '"+id_classSelected+"'"
                + " and examination.id_examination = class.id_examination";
            ResultSet rs = statement.executeQuery(sql);
            String open = "";
            if(rs.first()){
                classId_class.setText(rs.getString("class.id_class"));
                classId_exam.setText(rs.getString("examination.id_examination"));
                className.setText(rs.getString("class.name"));
                classAddress.setText(rs.getString("class.address"));
                classDate.setText(rs.getString("examination.date"));
                openSelected = rs.getString("examination.open");
                if(openSelected.equals("0")){
                    classStateButton.setText("Start Exam");
                    open = "initial";
                }else if(openSelected.equals("1")){
                    classStateButton.setText("Finish Exam");
                    open = "running";
                }else if(openSelected.equals("2")){
                    classStateButton.setText("Reset Exam");
                    open = "finished";
                }
                classState.setText(open);
                id_examSelected = rs.getString("examination.id_examination");


                //reset the table
                DefaultTableModel modelClass = (DefaultTableModel) classTable.getModel();
                int rowCount = modelClass.getRowCount();
                for (int x = rowCount - 1; x >= 0; x--) {
                    modelClass.removeRow(x);
                }
                //call rest service and take the result
                SupervisorClassReport_JerseyClient clientClass = new SupervisorClassReport_JerseyClient(id_classSelected);
                String dataClass = clientClass.getJson();
                if(dataClass.contains("no-result")){
                    classErrorLabel.setText("No results found");
                }else{
                    TypeToken<ArrayList<SupervisorClassReportResult>> tokenClass = new TypeToken<ArrayList<SupervisorClassReportResult>>() {};
                    ArrayList<SupervisorClassReportResult> classReport =new Gson().fromJson(dataClass, tokenClass.getType());
                    for(SupervisorClassReportResult st : classReport){
                        modelClass.addRow(new String[]{
                            st.getUsername(),
                            st.getName(),
                            st.getLastname(),
                            st.getScore()
                        });
                    }
                }
            }
            connection.close();
        }catch(SQLException e2){
            e2.printStackTrace();
        }
    }//GEN-LAST:event_classStateButtonActionPerformed

    private void insertClassSubmitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertClassSubmitButtonMouseEntered

        insertClassSubmitButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_insertClassSubmitButtonMouseEntered

    private void insertClassSubmitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertClassSubmitButtonMouseExited

        insertClassSubmitButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_insertClassSubmitButtonMouseExited

    private void insertClassFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertClassFileButtonActionPerformed

        int returnVal = fileChooser.showOpenDialog(Supervisor.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            //This is where a real application would open the file.
            Connection connection = null;
            Statement statement = null;
            try{
                connection = new Database().getConnection();
                statement = connection.createStatement();
                //set auto commit to false, make sure all entries will insert before commiting
                connection.setAutoCommit(false);
                String msg="";
                Workbook workbook=null;
                try{
                    //entries : number of uploaded and inserted to database rows
                    int entries=0;
                    workbook = WorkbookFactory.create(file);
                    Sheet sheet = workbook.getSheetAt(0);
                    for (Row row: sheet) {
                        if(row.getLastCellNum()>=4 || row.getRowNum()>0){
                            /*  OPEN DATABASE - CHECK LOGICAL CONNECTION - INSERT ENTRIES - START   */
                            String username = row.getCell(0).toString();
                            String name = row.getCell(1).toString();
                            String lastname = row.getCell(2).toString();
                            String id_class = id_classSelected;
                            //check if the user exists
                            String id_user=null;
                            int alreadyIn=0;
                            String sql = "select * from user where username = '"+username+"' and "
                                + "name = '"+name+"' and lastname = '"+lastname+"' and role = '2'";
                            ResultSet rs = statement.executeQuery(sql);
                            if(rs.first()){
                                if(rs.getString("id_user")!=null)
                                    id_user = rs.getString("id_user");
                            }
                            rs.close();
                            if(id_user!=null){
                                //check if the user is already in the class
                                sql = "select count(*) from class_has_user where id_user = '"+id_user+"' and id_class = '"+id_class+"'";
                                rs = statement.executeQuery(sql);
                                if(rs.first()){
                                    alreadyIn = rs.getInt("count(*)");
                                }
                                rs.close();
                                if(alreadyIn>0){
                                    //user already in
                                }
                                else{
                                    //insert user
                                    sql = "insert into class_has_user(id_user,id_class) values"
                                            + "('"+id_user+"','"+id_class+"')";
                                    statement.executeUpdate(sql);
                                    entries++;
                                }
                            }else{
                                //user does not exists
                            }
                            /*  OPEN DATABASE - CHECK LOGICAL CONNECTION - INSERT ENTRIES - END     */
                        }else{
                            workbook.close();
                            //file.delete();
                            insertClassErrorLabel.setText("File doesn't contain the necessary columns");
                        }
                    }
                    int rows = sheet.getPhysicalNumberOfRows();
                    if(rows<2){
                        msg="Procedure cannot finish, no records available";
                        connection.rollback();
                    }else{
                        if(entries==(rows-1)){
                            msg="Procedure finished : "+entries+" lines added";
                            connection.commit();
                        }else{
                            connection.rollback();
                            msg="Procedure cannot finished. Wrong records found in file";
                        }
                    }
                    connection.setAutoCommit(true);
                    workbook.close();
                    //file.delete();
                    insertClassErrorLabel.setText(msg);
                }catch(Exception e){
                    connection.rollback();
                    connection.setAutoCommit(true);
                    //workbook.close();
                    //file.delete();
                    e.printStackTrace();
                    insertClassErrorLabel.setText("Procedure unable to finish. File doesn't have the proper format or some records are incorect");
                }
                //delete downloaded file
                workbook.close();
                //file.delete();
                /*      OPEN EXCEL FILE HERE   -  END        */
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                insertClassErrorLabel.setText("Procedure unable to finish. File doesn't have the proper format or some records are incorect");
            } catch (IOException ex) {
                ex.printStackTrace();
                insertClassErrorLabel.setText("Procedure unable to finish. File doesn't have the proper format or some records are incorect");
            }
        } else {
            //cancel by user
        }
    }//GEN-LAST:event_insertClassFileButtonActionPerformed

    private void insertClassUsernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertClassUsernameTextFieldActionPerformed

    }//GEN-LAST:event_insertClassUsernameTextFieldActionPerformed

    private void insertClassBackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertClassBackButtonMouseEntered

        insertClassBackButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_insertClassBackButtonMouseEntered

    private void insertClassBackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertClassBackButtonMouseExited

        insertClassBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_insertClassBackButtonMouseExited

    private void insertClassBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertClassBackButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(classPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        classInsertButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
        //update class result again
        try{
                Connection connection = new Database().getConnection();
                Statement statement = connection.createStatement();
                String sql = "select * from examination,class where class.id_class = '"+id_classSelected+"'"
                    + " and examination.id_examination = class.id_examination";
                ResultSet rs = statement.executeQuery(sql);
                String open = "";
                if(rs.first()){
                    classId_class.setText(rs.getString("class.id_class"));
                    classId_exam.setText(rs.getString("examination.id_examination"));
                    className.setText(rs.getString("class.name"));
                    classAddress.setText(rs.getString("class.address"));
                    classDate.setText(rs.getString("examination.date"));
                    openSelected = rs.getString("examination.open");
                    if(openSelected.equals("0")){
                        classStateButton.setText("Start Exam");
                        open = "initial";
                    }else if(openSelected.equals("1")){
                        classStateButton.setText("Finish Exam");
                        open = "running";
                    }else if(openSelected.equals("2")){
                        classStateButton.setText("Reset Exam");
                        open = "finished";
                    }
                    classState.setText(open);
                    id_examSelected = rs.getString("examination.id_examination");
                    

                    //reset the table
                    DefaultTableModel modelClass = (DefaultTableModel) classTable.getModel();
                    int rowCount = modelClass.getRowCount();
                    for (int x = rowCount - 1; x >= 0; x--) {
                        modelClass.removeRow(x);
                    }
                    //call rest service and take the result
                    SupervisorClassReport_JerseyClient clientClass = new SupervisorClassReport_JerseyClient(id_classSelected);
                    String dataClass = clientClass.getJson();
                    if(dataClass.contains("no-result")){
                        classErrorLabel.setText("No results found");
                    }else{
                        TypeToken<ArrayList<SupervisorClassReportResult>> tokenClass = new TypeToken<ArrayList<SupervisorClassReportResult>>() {};
                        ArrayList<SupervisorClassReportResult> classReport =new Gson().fromJson(dataClass, tokenClass.getType());
                        for(SupervisorClassReportResult st : classReport){
                            modelClass.addRow(new String[]{
                                st.getUsername(),
                                st.getName(),
                                st.getLastname(),
                                st.getScore()
                            });
                        }
                    }
                }
                connection.close();
            }catch(SQLException e1){
                e1.printStackTrace();
            }
    }//GEN-LAST:event_insertClassBackButtonActionPerformed

    private void insertClassSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertClassSubmitButtonActionPerformed

        String username = insertClassUsernameTextField.getText();
        String name = insertClassNameTextField.getText();
        String lastname = insertClassLastnameTextField.getText();
        String id_class = insertClassId_class.getText();
        String regex = "[a-aA-Z]{5,}[a-zA-Z0-9]*";
        if(username.isEmpty() || name.isEmpty() || lastname.isEmpty() || id_class.isEmpty()){
            insertClassErrorLabel.setText("All fields must be filled");
        }else{
            if(username.matches(regex) && name.matches(regex) && lastname.matches(regex)){
                try{
                    Connection connection = new Database().getConnection();
                    Statement statement = connection.createStatement();
                    //check if the user exists
                    String id_user=null;
                    int alreadyIn=0;
                    String sql = "select * from user where username = '"+username+"' and "
                        + "name = '"+name+"' and lastname = '"+lastname+"' and role = '2'";
                    ResultSet rs = statement.executeQuery(sql);
                    if(rs.first()){
                        if(rs.getString("id_user")!=null)
                            id_user = rs.getString("id_user");
                    }
                    rs.close();
                    if(id_user!=null){
                        //check if the user is already in the class
                        sql = "select count(*) from class_has_user where id_user = '"+id_user+"' and id_class = '"+id_class+"'";
                        rs = statement.executeQuery(sql);
                        if(rs.first()){
                            alreadyIn = rs.getInt("count(*)");
                        }
                        rs.close();
                        if(alreadyIn>0){
                            //user already in
                            insertClassErrorLabel.setText("User already assigned");
                        }
                        else{
                            //insert user
                            sql = "insert into class_has_user(id_user,id_class) values"
                                    + "('"+id_user+"','"+id_class+"')";
                            statement.executeUpdate(sql);
                            insertClassErrorLabel.setText("Insert completed");
                        }
                    }else{
                        //user does not exists
                        insertClassErrorLabel.setText("Cannot find user's info");
                    }
                    connection.close();
                }catch(SQLException e3){
                    e3.printStackTrace();
                }
            }else{
                insertClassErrorLabel.setText("Only alpharithmetics longer than 5 characters allowed");
            }
        }
    }//GEN-LAST:event_insertClassSubmitButtonActionPerformed

    private void removeClassUsernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClassUsernameTextFieldActionPerformed

    }//GEN-LAST:event_removeClassUsernameTextFieldActionPerformed

    private void removeClassSubmitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeClassSubmitButtonMouseEntered

        removeClassSubmitButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_removeClassSubmitButtonMouseEntered

    private void removeClassSubmitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeClassSubmitButtonMouseExited

        removeClassSubmitButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_removeClassSubmitButtonMouseExited

    private void removeClassSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClassSubmitButtonActionPerformed

        String username = removeClassUsernameTextField.getText();
        String name = removeClassNameTextField.getText();
        String lastname = removeClassLastnameTextField.getText();
        String id_class = removeClassId_class.getText();
        String regex = "[a-aA-Z]{5,}[a-zA-Z0-9]*";
        if(username.isEmpty() || name.isEmpty() || lastname.isEmpty() || id_class.isEmpty()){
            removeClassErrorLabel.setText("All fields must be filled");
        }else{
            if(username.matches(regex) && name.matches(regex) && lastname.matches(regex)){
                try{
                    Connection connection = new Database().getConnection();
                    Statement statement = connection.createStatement();
                    //check if the user exists
                    String id_user=null;
                    int alreadyIn=0;
                    String sql = "select * from user where username = '"+username+"' and "
                        + "name = '"+name+"' and lastname = '"+lastname+"' and role = '2'";
                    ResultSet rs = statement.executeQuery(sql);
                    if(rs.first()){
                        if(rs.getString("id_user")!=null)
                            id_user = rs.getString("id_user");
                    }
                    rs.close();
                    if(id_user!=null){
                        //check if the user is  in the class
                        sql = "select count(*) from class_has_user where id_user = '"+id_user+"' and id_class = '"+id_class+"'";
                        rs = statement.executeQuery(sql);
                        if(rs.first()){
                            alreadyIn = rs.getInt("count(*)");
                        }
                        rs.close();
                        if(alreadyIn>0){
                            //remove student
                            sql = "delete from class_has_user where id_user = '"+id_user+"' and"
                                    + " id_class = '"+id_class+"'";
                            statement.executeUpdate(sql);
                            removeClassErrorLabel.setText("Remove completed");
                        }
                        else{
                            //user is not is the class
                            removeClassErrorLabel.setText("User is not assigned in this center");
                        }
                    }else{
                        //user does not exists
                        removeClassErrorLabel.setText("User info not found");
                    }
                    connection.close();
                }catch(SQLException e3){
                    e3.printStackTrace();
                }
            }else{
                removeClassErrorLabel.setText("Only alpharithmetics longer than 5 characters allowed");
            }
        }
    }//GEN-LAST:event_removeClassSubmitButtonActionPerformed

    private void removeClassFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClassFileButtonActionPerformed
 
         int returnVal = fileChooser.showOpenDialog(Supervisor.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            //This is where a real application would open the file.
            Connection connection = null;
            Statement statement = null;
            try{
                connection = new Database().getConnection();
                statement = connection.createStatement();
                //set auto commit to false, make sure all entries will insert before commiting
                connection.setAutoCommit(false);
                String msg="";
                Workbook workbook=null;
                try{
                    //entries : number of uploaded and inserted to database rows
                    int entries=0;
                    workbook = WorkbookFactory.create(file);
                    Sheet sheet = workbook.getSheetAt(0);
                    for (Row row: sheet) {
                        if(row.getLastCellNum()>=4 || row.getRowNum()>0){
                            /*  OPEN DATABASE - CHECK LOGICAL CONNECTION - INSERT ENTRIES - START   */
                            String username = row.getCell(0).toString();
                            String name = row.getCell(1).toString();
                            String lastname = row.getCell(2).toString();
                            String id_class = row.getCell(3).toString();
                            //check if the user exists
                            String id_user=null;
                            int alreadyIn=0;
                            String sql = "select * from user where username = '"+username+"' and "
                                + "name = '"+name+"' and lastname = '"+lastname+"' and role = '2'";
                            ResultSet rs = statement.executeQuery(sql);
                            if(rs.first()){
                                if(rs.getString("id_user")!=null)
                                    id_user = rs.getString("id_user");
                            }
                            rs.close();
                            if(id_user!=null){
                                //check if the user is  in the class
                                sql = "select count(*) from class_has_user where id_user = '"+id_user+"' and id_class = '"+id_class+"'";
                                rs = statement.executeQuery(sql);
                                if(rs.first()){
                                    alreadyIn = rs.getInt("count(*)");
                                }
                                rs.close();
                                if(alreadyIn>0){
                                    //remove student
                                    sql = "delete from class_has_user where id_user = '"+id_user+"' and"
                                            + " id_class = '"+id_class+"'";
                                    statement.executeUpdate(sql);
                                    entries++;
                                }
                                else{
                                    //user is not is the class
                                }
                            }else{
                                //user does not exists
                            }
                            /*  OPEN DATABASE - CHECK LOGICAL CONNECTION - INSERT ENTRIES - END     */
                        }else{
                            workbook.close();
                            //file.delete();
                            removeClassErrorLabel.setText("File doesn't contain the necessary columns");
                        }
                    }
                    int rows = sheet.getPhysicalNumberOfRows();
                    if(rows<2){
                        msg="Procedure cannot complete, no records found";
                        connection.rollback();
                    }else{
                        if(entries==(rows-1)){
                            msg="Procedure completed : "+entries+" lines removed";
                            connection.commit();
                        }else{
                            connection.rollback();
                            msg="Procedure cannot complete, some lines might be wrong";
                        }
                    }
                    connection.setAutoCommit(true);
                    workbook.close();
                    //file.delete();
                    removeClassErrorLabel.setText(msg);
                }catch(Exception e){
                    connection.rollback();
                    connection.setAutoCommit(true);
                    //workbook.close();
                    //file.delete();
                    e.printStackTrace();
                    removeClassErrorLabel.setText("Procedure cannot complete, some lines might be wrong");
                }
                //delete downloaded file
                workbook.close();
                //file.delete();
                /*      OPEN EXCEL FILE HERE   -  END        */
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                removeClassErrorLabel.setText("Procedure cannot complete, wrong file format or some lines might be wrong");
            } catch (IOException ex) {
                ex.printStackTrace();
                removeClassErrorLabel.setText("Procedure cannot complete, wrong file format or some lines might be wrong");
            }
        } else {
            //cancel by user
        }
    }//GEN-LAST:event_removeClassFileButtonActionPerformed

    private void removeClassBackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeClassBackButtonMouseEntered

        removeClassBackButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_removeClassBackButtonMouseEntered

    private void removeClassBackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeClassBackButtonMouseExited

        removeClassBackButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
    }//GEN-LAST:event_removeClassBackButtonMouseExited

    private void removeClassBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClassBackButtonActionPerformed

        containerPanel.removeAll();
        containerPanel.add(classPanel);
        containerPanel.repaint();
        containerPanel.revalidate();
        classRemoveButton.setBorder(BorderFactory.createMatteBorder(0,1,0,1,Color.decode("0x448AFF")));
        //update class result again
        try{
                Connection connection = new Database().getConnection();
                Statement statement = connection.createStatement();
                String sql = "select * from examination,class where class.id_class = '"+id_classSelected+"'"
                    + " and examination.id_examination = class.id_examination";
                ResultSet rs = statement.executeQuery(sql);
                String open = "";
                if(rs.first()){
                    classId_class.setText(rs.getString("class.id_class"));
                    classId_exam.setText(rs.getString("examination.id_examination"));
                    className.setText(rs.getString("class.name"));
                    classAddress.setText(rs.getString("class.address"));
                    classDate.setText(rs.getString("examination.date"));
                    openSelected = rs.getString("examination.open");
                    if(openSelected.equals("0")){
                        classStateButton.setText("Start Exam");
                        open = "initial";
                    }else if(openSelected.equals("1")){
                        classStateButton.setText("Finish Exam");
                        open = "running";
                    }else if(openSelected.equals("2")){
                        classStateButton.setText("Reset Exam");
                        open = "Finished";
                    }
                    classState.setText(open);
                    id_examSelected = rs.getString("examination.id_examination");
                    

                    //reset the table
                    DefaultTableModel modelClass = (DefaultTableModel) classTable.getModel();
                    int rowCount = modelClass.getRowCount();
                    for (int x = rowCount - 1; x >= 0; x--) {
                        modelClass.removeRow(x);
                    }
                    //call rest service and take the result
                    SupervisorClassReport_JerseyClient clientClass = new SupervisorClassReport_JerseyClient(id_classSelected);
                    String dataClass = clientClass.getJson();
                    if(dataClass.contains("no-result")){
                        classErrorLabel.setText("No results found");
                    }else{
                        TypeToken<ArrayList<SupervisorClassReportResult>> tokenClass = new TypeToken<ArrayList<SupervisorClassReportResult>>() {};
                        ArrayList<SupervisorClassReportResult> classReport =new Gson().fromJson(dataClass, tokenClass.getType());
                        for(SupervisorClassReportResult st : classReport){
                            modelClass.addRow(new String[]{
                                st.getUsername(),
                                st.getName(),
                                st.getLastname(),
                                st.getScore()
                            });
                        }
                    }
                }
                connection.close();
            }catch(SQLException e1){
                e1.printStackTrace();
            }
    }//GEN-LAST:event_removeClassBackButtonActionPerformed

    private void classDownloadReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classDownloadReportButtonActionPerformed
        SupervisorClassReportResult[] report = null;
        String id_class = id_classSelected;
        try {
            Connection connection = new Database().getConnection();
            Statement statement = connection.createStatement();
            Statement statement2 = connection.createStatement();
            ResultSet rs,rs2;
            //get the status of the exam (initial,running,expired)
            int numberOfStudents=0;
            String open="";
            int i=0;
            String sql = "select * from class,examination where class.id_examination = "
                    + "examination.id_examination and class.id_class = '"+id_class+"'";
            rs = statement.executeQuery(sql);
            if(rs.first()){
                open = rs.getString("examination.open");
            }
            rs.close();
            //set-up result array
            sql = "select count(distinct user.id_user) from class_has_user,user where "
                    + "class_has_user.id_class = '"+id_class+"' and class_has_user.id_user = user.id_user"
                    + " and user.role = '2'";
            rs = statement.executeQuery(sql);
            if(rs.first()){
                numberOfStudents = rs.getInt("count(distinct user.id_user)");
            }
            rs.close();
            //the class must have members
            if(numberOfStudents>0){
                report = new SupervisorClassReportResult[numberOfStudents];
                //find all students of the class
                sql = "select * from class_has_user,user where class_has_user.id_user = user.id_user "
                        + "and class_has_user.id_class = '"+id_class+"' and user.role = '2'"
                        + " group by user.id_user";
                rs = statement.executeQuery(sql);
                if(open.equals("0") || open.equals("1")){
                    //there are no grades yet, show only student info
                    while(rs.next()){
                        report[i] = new SupervisorClassReportResult(rs.getString("user.id_user"),rs.getString("user.username"),
                                rs.getString("user.name"),rs.getString("user.lastname")," - ");
                        i++;
                    }
                    rs.close();
                }else{
                    i=0;
                    while(rs.next()){
                        int score=0;
                        //for every student, get the results
                        sql = "select * from class_has_user where id_class = '"+id_class+"'"
                                + " and id_user = '"+rs.getString("user.id_user")+"'";
                        rs2 = statement2.executeQuery(sql);
                        //for every question of student, check if there is an answer or no
                        while(rs2.next()){
                            if(rs2.getString("answer")!=null){
                                if(rs2.getString("correct").equals("1")){
                                    score++;
                                }
                            }
                        }
                        rs2.close();
                        report[i] = new SupervisorClassReportResult(rs.getString("user.id_user"),
                                rs.getString("user.username"),rs.getString("user.name"),
                                rs.getString("user.lastname"),String.valueOf(score));
                        i++;
                    }
                    rs.close();
                }
                //results
            }else{
                //no results
            }
            connection.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(SupervisorReportDownload.class.getName()).log(Level.SEVERE, null, ex);
            }
            /*  GET AN OBJECT OF CLASSES STUDENT'S RESULTS - END   */
            /*  CREATE THE EXCEL FILE WITH THE RESULT OF THE OBJECT - START  */
            //excel code from : https://www.callicoder.com/java-write-excel-file-apache-poi
            String[] excelColumns = {"Account","Name","Lastname","Examination Center ID","Mark"};
            if(report!=null){
                // Create a Workbook
                Workbook workbook = new XSSFWorkbook(); // new HSSFWorkbook() for generating `.xls` file
                // Create a Sheet
                Sheet sheet = workbook.createSheet("Students");
                // Create a Font for styling header cells
                org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 14);
                headerFont.setColor(IndexedColors.BLUE.getIndex());
                // Create a CellStyle with the font
                CellStyle headerCellStyle = workbook.createCellStyle();
                headerCellStyle.setFont(headerFont);
                // Create a Row
                Row headerRow = sheet.createRow(0);
                // Create cells
                for(int x = 0; x < excelColumns.length; x++) {
                    Cell cell = headerRow.createCell(x);
                    cell.setCellValue(excelColumns[x]);
                    cell.setCellStyle(headerCellStyle);
                }
                // Create Other rows and cells with students data
                int rowNum = 1;
                for(SupervisorClassReportResult student : report) {
                    Row row = sheet.createRow(rowNum++);
                    row.createCell(0).setCellValue(student.getUsername());
                    row.createCell(1).setCellValue(student.getName());
                    row.createCell(2).setCellValue(student.getLastname());
                    row.createCell(3).setCellValue(id_class);
                    row.createCell(4).setCellValue(student.getScore());
                }
                // Resize all columns to fit the content size
                for(int x = 0; x < excelColumns.length; x++) {
                    sheet.autoSizeColumn(x);
                }
                // Write the output to a file
                FileOutputStream fileOut = null;
                try {
                    int returnVal = fileChooser.showSaveDialog(Supervisor.this);
                    if(returnVal == JFileChooser.APPROVE_OPTION) {
                        //then write your code to write to disk
                        fileOut = new FileOutputStream(fileChooser.getCurrentDirectory()+"\\Supervisor_studentResults.xlsx");
                        workbook.write(fileOut);
                        fileOut.close();
                        workbook.close();
                    }
                } catch (FileNotFoundException ex) {
                    //Logger.getLogger(AdminApp.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    //Logger.getLogger(AdminApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }//GEN-LAST:event_classDownloadReportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Supervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Supervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Supervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Supervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Supervisor main = new Supervisor();
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressTitleLabel;
    private javax.swing.JLabel classAddress;
    private javax.swing.JLabel classAddressLabel;
    private javax.swing.JButton classBackButton;
    private javax.swing.JLabel classDate;
    private javax.swing.JLabel classDateLabel;
    private javax.swing.JButton classDownloadReportButton;
    private javax.swing.JLabel classErrorLabel;
    private javax.swing.JLabel classId_class;
    private javax.swing.JLabel classId_classLabel;
    private javax.swing.JLabel classId_exam;
    private javax.swing.JLabel classId_examLabel;
    private javax.swing.JButton classInsertButton;
    private javax.swing.JLabel className;
    private javax.swing.JLabel classNameLabel;
    private javax.swing.JPanel classPanel;
    private javax.swing.JButton classRemoveButton;
    private javax.swing.JLabel classState;
    private javax.swing.JButton classStateButton;
    private javax.swing.JLabel classStateLabel;
    private javax.swing.JTable classTable;
    private javax.swing.JLabel classTitleLabel;
    private javax.swing.JButton classesButton;
    private javax.swing.JLabel classesErrorLabel;
    private javax.swing.JPanel classesPanel;
    private javax.swing.JTable classesTable;
    private javax.swing.JLabel classesTitle2Label;
    private javax.swing.JLabel classesTitle3Label;
    private javax.swing.JLabel classesTitleLabel;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JLabel emailTitleLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JButton insertClassBackButton;
    private javax.swing.JLabel insertClassErrorLabel;
    private javax.swing.JButton insertClassFileButton;
    private javax.swing.JLabel insertClassFileLabel;
    private javax.swing.JLabel insertClassFileLabel2;
    private javax.swing.JLabel insertClassId_class;
    private javax.swing.JLabel insertClassId_classLabel;
    private javax.swing.JLabel insertClassId_exam;
    private javax.swing.JLabel insertClassId_examLabel;
    private javax.swing.JLabel insertClassLabel;
    private javax.swing.JLabel insertClassLastnameLabel;
    private javax.swing.JTextField insertClassLastnameTextField;
    private javax.swing.JLabel insertClassNameLabel;
    private javax.swing.JTextField insertClassNameTextField;
    private javax.swing.JPanel insertClassPanel;
    private javax.swing.JButton insertClassSubmitButton;
    private javax.swing.JLabel insertClassTitle1;
    private javax.swing.JLabel insertClassTitle2;
    private javax.swing.JLabel insertClassUsernameLabel;
    private javax.swing.JTextField insertClassUsernameTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lastnameTitleLabel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JLabel nameTitleLabel;
    private javax.swing.JLabel phoneTitleLabel;
    private javax.swing.JLabel profilAddressLabel;
    private javax.swing.JButton profilButton;
    private javax.swing.JLabel profilEmailLabel;
    private javax.swing.JLabel profilLastnameLabel;
    private javax.swing.JLabel profilNameLabel;
    private javax.swing.JPanel profilPanel;
    private javax.swing.JLabel profilPhoneLabel;
    private javax.swing.JLabel profilRoleLabel;
    private javax.swing.JLabel profilUsernameLabel;
    private javax.swing.JButton removeClassBackButton;
    private javax.swing.JLabel removeClassErrorLabel;
    private javax.swing.JButton removeClassFileButton;
    private javax.swing.JLabel removeClassFileLabel;
    private javax.swing.JLabel removeClassFileLabel2;
    private javax.swing.JLabel removeClassId_class;
    private javax.swing.JLabel removeClassId_classLabel;
    private javax.swing.JLabel removeClassId_exam;
    private javax.swing.JLabel removeClassId_examLabel;
    private javax.swing.JLabel removeClassLabel;
    private javax.swing.JLabel removeClassLastnameLabel;
    private javax.swing.JTextField removeClassLastnameTextField;
    private javax.swing.JLabel removeClassNameLabel;
    private javax.swing.JTextField removeClassNameTextField;
    private javax.swing.JPanel removeClassPanel;
    private javax.swing.JButton removeClassSubmitButton;
    private javax.swing.JLabel removeClassTitle1;
    private javax.swing.JLabel removeClassTitle2;
    private javax.swing.JLabel removeClassUsernameLabel;
    private javax.swing.JTextField removeClassUsernameTextField;
    private javax.swing.JLabel roleTitleLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchErrorLabel;
    private javax.swing.JLabel searchLastnameLabel;
    private javax.swing.JTextField searchLastnameTextField;
    private javax.swing.JLabel searchNameLabel;
    private javax.swing.JTextField searchNameTextField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel searchResultAddress;
    private javax.swing.JLabel searchResultAddressLabel;
    private javax.swing.JButton searchResultBackButton;
    private javax.swing.JLabel searchResultEmail;
    private javax.swing.JLabel searchResultEmailLabel;
    private javax.swing.JLabel searchResultLastname;
    private javax.swing.JLabel searchResultLastnameLabel;
    private javax.swing.JLabel searchResultName;
    private javax.swing.JLabel searchResultNameLabel;
    private javax.swing.JPanel searchResultPanel;
    private javax.swing.JLabel searchResultPhone;
    private javax.swing.JLabel searchResultPhoneLabel;
    private javax.swing.JLabel searchResultRole;
    private javax.swing.JLabel searchResultRoleLabel;
    private javax.swing.JLabel searchResultStudentAddress;
    private javax.swing.JLabel searchResultStudentAddressLabel;
    private javax.swing.JButton searchResultStudentBackButton;
    private javax.swing.JLabel searchResultStudentEmail;
    private javax.swing.JLabel searchResultStudentEmailLabel;
    private javax.swing.JLabel searchResultStudentId_class;
    private javax.swing.JLabel searchResultStudentId_classLabel;
    private javax.swing.JLabel searchResultStudentId_exam;
    private javax.swing.JLabel searchResultStudentId_examLabel;
    private javax.swing.JLabel searchResultStudentLastname;
    private javax.swing.JLabel searchResultStudentLastnameLabel;
    private javax.swing.JLabel searchResultStudentName;
    private javax.swing.JLabel searchResultStudentNameLabel;
    private javax.swing.JPanel searchResultStudentPanel;
    private javax.swing.JLabel searchResultStudentPhone;
    private javax.swing.JLabel searchResultStudentPhoneLabel;
    private javax.swing.JLabel searchResultStudentRole;
    private javax.swing.JLabel searchResultStudentRoleLabel;
    private javax.swing.JTable searchResultStudentTable;
    private javax.swing.JLabel searchResultStudentTitle2Label;
    private javax.swing.JLabel searchResultStudentTitleLabel;
    private javax.swing.JLabel searchResultStudentUsername;
    private javax.swing.JLabel searchResultStudentUsernameLabel;
    private javax.swing.JTable searchResultTable;
    private javax.swing.JLabel searchResultTitle2Label;
    private javax.swing.JLabel searchResultTitleLabel;
    private javax.swing.JLabel searchResultUsername;
    private javax.swing.JLabel searchResultUsernameLabel;
    private javax.swing.JButton searchSubmitButton;
    private javax.swing.JLabel searchTitleLabel;
    private javax.swing.JLabel searchUsernameLabel;
    private javax.swing.JTextField searchUsernameTextField;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titleMessage;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel usernameTitleLabel;
    // End of variables declaration//GEN-END:variables

    static class SupervisorClassesReport_JerseyClient {

        private WebTarget webTarget;
        private Client client;
        private static final String BASE_URI = "http://localhost:8080/ExaminationCenters/";

        public SupervisorClassesReport_JerseyClient(String id_user) {
            client = ClientBuilder.newClient();
            String resourcePath = java.text.MessageFormat.format("supervisor-classes/report/{0}", new Object[]{id_user});
            webTarget = client.target(BASE_URI).path(resourcePath);
        }

        public void setResourcePath(String id_user) {
            String resourcePath = java.text.MessageFormat.format("supervisor-classes/report/{0}", new Object[]{id_user});
            webTarget = client.target(BASE_URI).path(resourcePath);
        }

        public String getJson() throws ClientErrorException {
            WebTarget resource = webTarget;
            return resource.request(MediaType.APPLICATION_JSON).get(String.class);
        }

        public void close() {
            client.close();
        }
    }

    static class SupervisorClassReport_JerseyClient {

        private WebTarget webTarget;
        private Client client;
        private static final String BASE_URI = "http://localhost:8080/ExaminationCenters/";

        public SupervisorClassReport_JerseyClient(String id_class) {
            client = ClientBuilder.newClient();
            String resourcePath = java.text.MessageFormat.format("supervisor-class/report/{0}", new Object[]{id_class});
            webTarget = client.target(BASE_URI).path(resourcePath);
        }

        public void setResourcePath(String id_class) {
            String resourcePath = java.text.MessageFormat.format("supervisor-class/report/{0}", new Object[]{id_class});
            webTarget = client.target(BASE_URI).path(resourcePath);
        }

        public String getJson() throws ClientErrorException {
            WebTarget resource = webTarget;
            return resource.request(MediaType.APPLICATION_JSON).get(String.class);
        }

        public void close() {
            client.close();
        }
    }
}
